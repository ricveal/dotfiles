#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
}

usage() {
  cat << EOF # remove the space between << and EOF, this is due to web plugin issue
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-c] path/to/file.spec.ts

Simplify running targeted tests and gathering coverage data.

This helper provides a way to point to a specific test file and run only those tests in a watcher.
Additionally, use it to gather coverage data for that targeted test file, only showing coverage for it.

This uses npx to run react-scripts tests.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
-c, --coverage  Print the coverage information for the targeted file
-w, --watch     Enable Jest's watcher
-j, --jest      Use Jest to run the tests instead of react-scripts
EOF
  exit
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  collect_coverage=0
  watch_flags="--watch=false --watchAll=false"
  command="react-scripts test"

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -w | --watch) watch_flags="--watch=true" ;;
    -j | --jest) command="jest" ;;
    -c | --coverage)
        collect_coverage=1
        ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  # [[ -z "${param-}" ]] && die "Missing required parameter: param"
  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"
  spec_file=${args[0]}

  return 0
}

parse_params "$@"
setup_colors

coverage_file=""
if [[ $collect_coverage -eq 1 ]]; then
  coverage_file=${spec_file//\.spec/}
  coverage_flags="--coverage=true --collectCoverageFrom=\"$coverage_file\""
else
  coverage_flags="--coverage=false"
fi

npx $command --color $watch_flags $coverage_flags "$spec_file"
